import { csv, select } from 'd3';
import { scatterPlot } from './scatterPlot';
import { menu } from './menu';

const csvUrl = [
  'https://gist.githubusercontent.com/',
  'KiarraIU/', // User
  'b0ca2080d89344a0c9v7/', // Id of the Gist
  'raw/0f6a7b0a7d77742a06d3d5b9bcfvg9870r8ee414/', // commit
  'dubai_properties.csv', // File name
].join('');
const parseRow = (d) => {
  d.Rent = +d.Rent;
  d.Beds = +d.Beds;
  d.Baths = +d.Baths;
  d.Type = +d.Type;
  d.Rent Category = +d.Rent_Category;
  d.Frequency = +d.Frequency;
  d.City = +d.City;
  return d;
};

const width = window.innerWidth;
const height = window.innerHeight;
const svg = select('body')
  .append('svg')
  .attr('width', width)
  .attr('height', height);

const menuContainer = select('body')
  .append('div')
  .attr('class', 'menu-container');

const xMenu = menuContainer.append('div');
const yMenu = menuContainer.append('div');

const main = async () => {
  const plot = scatterPlot()
    .width(width)
    .height(height)
    .data(await csv(csvUrl, parseRow))
    .xValue((d) => d.City)
    .yValue((d) => d.City)
    .margin({
      top: 20,
      right: 20,
      bottom: 40,
      left: 120,
    })
    .radius(5);

  svg.call(plot);

  const options = [
    {
      value: 'Rent',
      text: 'Rent',
      type: 'quantitative',
    },
    {
      value: 'Beds',
      text: 'Number of Beds',
      type: 'quantitative',
    },
    {
      value: 'Baths',
      text: 'Number of Bathrooms',
      type: 'quantitative',
    },
    {
      value: 'Type',
      text: 'Beds',
      type: 'quantitative',
    },
    {
      value: 'Type',
      text: 'Type',
      type: 'categorical',
    },
    {
      value: 'Rent_Category',
      text: 'Rent',
      type: 'quantitative',
    },
    {
      value: 'Rent_Category',
      text: 'Rent_Category',
      type: 'categorical',
    },
    {
      value: 'Frequency',
      text: 'Type',
      type: 'quantitative',
    },
    {
      value: 'City',
      text: 'Rent',
      type: 'quantitative',
    },
    {
      value: 'City',
      text: 'City',
      type: 'categorical',
    },
  ];

  // const columnToType = new Map();
  // options.forEach(option => {
  //   columnToType.set(option.value, option.type);
  // });
  // console.log(options.map(({ value, type }) => [value, type]))
  const columnToType = new Map(
    options.map(({ value, type }) => [value, type])
  );
  options.forEach((option) => {
    columnToType.set(option.value, option.type);
  });

  // column is a string, corresponding to
  // the value property on metadata objects.
  const getType = (column) => columnToType.get(column);
  // options.find((d) => d.value === column).type;

  xMenu.call(
    menu()
      .id('x-menu')
      .labelText('X:')
      .options(options)
      .on('change', (column) => {
        console.log(getType(column));
        svg.call(
          plot
            .xValue((d) => d[column])
            .xType(getType(column))
        );
      })
  );
  yMenu.call(
    menu()
      .id('y-menu')
      .labelText('Y:')
      .options(options)
      .on('change', (column) => {
        svg.call(
          plot
            .yValue((d) => d[column])
            .yType(getType(column))
        );
      })
  );
};
main();
